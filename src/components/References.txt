 //Below function is copied from Internet as an example
        uploadFile (files) {
      return new Promise((resolve, reject) => {
        var myUploader = this.$refs.uploader[0]
        var file = files[0]
        var fileSrc
        var fileData
        var reader = new FileReader()
        reader.readAsDataURL(file)
        reader.onerror = err => console.error(`Failed to read file: ${err}`)
        reader.onload = function () {
          fileSrc = reader.result
          fileData = fileSrc.substr(fileSrc.indexOf(',') + 1)
          stitchClient.callFunction('uploadImageToS3', [fileData, 'elever-erp-document-store', file.name, file.type])
            .then(result => {
              alert('fatto')
              console.log(file)
              myUploader.removeFile(file)
              resolve(files)
            })
            .catch(err => {
              console.error(`Failed to upload file: ${err}`)
              reject()
            })
        }
      })
    }
    ,



       // function called on updateForm
    async updateForm2() {
      this.showProgressBar = true;

      console.log(
        "Update Form",
        this.formData,
        this.$refs,
        this.$refs.personalForm
      );

      if (typeof this.$refs.basicForm === "undefined") {
        this.basicHasError = true;
      } else {
        this.submitBasicForm();
      }
      if (typeof this.$refs.personalForm === "undefined") {
        this.personalHasError = true;
      } else {
        this.submitPersonalForm();
      }

      this.checkPhoto();
      this.checkProof();

      if (
        !this.basicHasError &&
        !this.personalHasError &&
        !this.isErrorPhoto &&
        !this.isErrorProof
      ) {
        // create PrimaryContact
        this.formData.primaryContact =
          "+" +
          this.tmpData.primaryContactCountryCode +
          " " +
          this.tmpData.primaryContact;
        this.formData.alternateContact =
          "+" +
          this.tmpData.alternateContactCountryCode +
          " " +
          this.tmpData.alternateContact;

        // create Country Object using Country radio and otherCountry Dropdown
        if (this.tmpData.countryRadio === "India") {
          this.formData.country = {};
          this.formData.country.id = 81;
          this.formData.country.name = "India";
        } else {
          this.tmpData.countryRadio = "Other";
          this.formData.country = Object.assign({}, this.tmpData.otherCountry);
        }

        console.log("FormData", this.formData);

        // creating new Object with only updated values
        var updatedFormData = {};
        var previousForm = this.previousFormData;

        var form = this.formData;
        for (const key in previousForm) {
          if (
            previousForm[key] !== "" &&
            previousForm[key] !== null &&
            previousForm[key] !== "undefined"
          ) {
            // console.log("loop", key, form[key], previousForm[key], previousForm, this.previousFormData);
            // if(previousForm[key] !== form[key]){
            if (
              JSON.stringify(previousForm[key]) !== JSON.stringify(form[key])
            ) {
              console.log("Did not match", previousForm[key], form[key]);
              updatedFormData[key] = form[key];
            }
          }
        }

        console.log("updatedFormData", updatedFormData);

        // if updatedFormData has height then convert the same field to Cms
        var keys = ["partnerHeightFrom", "partnerHeightTo", "height"];
        for (const key of keys) {
          if (updatedFormData.hasOwnProperty(key)) {
            updatedFormData[key] = this.convertHeightToCms(
              updatedFormData[key]
            );
          }
        }
        console.log("updatedFormData", updatedFormData);

        // converting from CamelCase to SnakeCase
        var updatedFormDataSnakeCase = {};
        for (const key in updatedFormData) {
          // console.log("Key", camel);
          updatedFormDataSnakeCase[this.camelToSnake(key)] =
            updatedFormData[key];
        }
        console.log("Converted to Snake Case", updatedFormDataSnakeCase);
        await this.updateUser(updatedFormDataSnakeCase);

        //Update Photos and Proof if applicable
        console.log(
          "updateUserStatus",
          this.updateUserStatus,
          this.$refs.photo,
          this.$refs
        );
        if (this.updateUserStatus === true) {
          if (this.updatePhoto === true) {
            await this.$refs.photo.upload();

            //delete the photo
            if (this.previousPhotosFiles.length > 0) {
              for (let pFile of this.previousPhotosFiles) {
                console.log("Previous File", pFile.name, pFile);
                await this.deleteFile(pFile.name);
              }
            }
          }
          if (this.updateProof === true) {
            await this.$refs.proof.upload();

            //delete Proof
            if (this.previousProofFile.length > 0) {
              console.log("Previous File", this.previousProofFile[0].name);
              await this.deleteFile(this.previousProofFile[0].name);
            }
          }
        }
      } // end of if of !basicError and other Errors

      this.showProgressBar = false;
      //this.successProcess = true;
      //console.log("Statuses", this.showProgressBar,this.successProcess )
    }, // end of  UpdateForm